"use strict";function SignalProtocolStore(){this.store={}}SignalProtocolStore.prototype={Direction:{SENDING:1,RECEIVING:2},getIdentityKeyPair:function(){return Promise.resolve(this.get("identityKey"))},getLocalRegistrationId:function(){return Promise.resolve(this.get("registrationId"))},put:function(e,r){if(void 0===e||void 0===r||null===e||null===r)throw new Error("Tried to store undefined/null");this.store[e]=r},get:function(e,r){if(null==e)throw new Error("Tried to get value for undefined/null key");return e in this.store?this.store[e]:r},remove:function(e){if(null==e)throw new Error("Tried to remove value for undefined/null key");delete this.store[e]},isTrustedIdentity:function(e,r){if(null==e)throw new Error("tried to check identity key for undefined/null key");if(!(r instanceof ArrayBuffer))throw new Error("Expected identityKey to be an ArrayBuffer");var t=this.get("identityKey"+e);return void 0===t?Promise.resolve(!0):Promise.resolve(util.toString(r)===util.toString(t))},loadIdentityKey:function(e){if(null==e)throw new Error("Tried to get identity key for undefined/null key");return Promise.resolve(this.get("identityKey"+e))},saveIdentity:function(e,r){if(null==e)throw new Error("Tried to put identity key for undefined/null key");var t=new libsignal.SignalProtocolAddress.fromString(e),i=this.get("identityKey"+t.getName());return this.put("identityKey"+t.getName(),r),i&&util.toString(r)!==util.toString(i)?Promise.resolve(!0):Promise.resolve(!1)},loadPreKey:function(e){var r=this.get("25519KeypreKey"+e);return void 0!==r&&(r={pubKey:r.pubKey,privKey:r.privKey}),Promise.resolve(r)},storePreKey:function(e,r){return Promise.resolve(this.put("25519KeypreKey"+e,r))},removePreKey:function(e){return Promise.resolve(this.remove("25519KeypreKey"+e))},loadSignedPreKey:function(e){var r=this.get("25519KeysignedKey"+e);return void 0!==r&&(r={pubKey:r.pubKey,privKey:r.privKey}),Promise.resolve(r)},storeSignedPreKey:function(e,r){return Promise.resolve(this.put("25519KeysignedKey"+e,r))},removeSignedPreKey:function(e){return Promise.resolve(this.remove("25519KeysignedKey"+e))},loadSession:function(e){return Promise.resolve(this.get("session"+e))},storeSession:function(e,r){return Promise.resolve(this.put("session"+e,r))},removeSession:function(e){return Promise.resolve(this.remove("session"+e))},removeAllSessions:function(e){for(var r in this.store)r.startsWith("session"+e)&&delete this.store[r];return Promise.resolve()}};